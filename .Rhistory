data(mtcars)
head(mtcars)
x = cbind(1, mtcars$wt, mtcars$hp)
y = mtcars$mpg
head(x)
solve(t(x) %*% x) %*% t(x) %*% y
beta = solve(t(x) %*% x) %*% t(x) %*% y
coef(lm(mpg ~ wt + hp, data + mtcars))
coef(lm(mpg ~ wt + hp, data = mtcars))
head(mtcars)
data(mtcars)
head(mtcars)
data("swiss")
head(swiss)
x = cbind(1,swiss[,-1])
y = swiss$Fertility
beta=solve(t(x)%*%x) %*% t(x) %*% y
x = matrix(cbind(1,swiss[,-1]))
y = swiss$Fertility
beta=solve(t(x)%*%x) %*% t(x) %*% y
x = as.matrix(cbind(1,swiss[,-1]))
y = swiss$Fertility
beta=solve(t(x)%*%x) %*% t(x) %*% y
x = as.matrix(cbind(1,swiss[,-1]))
y = swiss$Fertility
beta=solve(t(x)%*%x) %*% t(x) %*% y
beta
lm(y~x)
predict.lm(lm(y~x),newData = data.frame(
Agriculture = 27.7,
Examination = 22,
Education = 29,
Catholic = 58.33,
Infant.Mortality = 19.3))
predict.lm(lm(y~swiss[,-1]),newData = data.frame(
Agriculture = 27.7,
Examination = 22,
Education = 29,
Catholic = 58.33,
Infant.Mortality = 19.3))
predict.lm(lm(y~as.matrix(swiss[,-1])),newData = data.frame(
Agriculture = 27.7,
Examination = 22,
Education = 29,
Catholic = 58.33,
Infant.Mortality = 19.3))
predict.lm(lm(y~as.matrix(swiss[,-1])),newData = data.frame(
xAgriculture = 27.7,
xExamination = 22,
xEducation = 29,
xCatholic = 58.33,
xInfant.Mortality = 19.3))
newData = data.frame(
+     xAgriculture = 27.7,
newData = data.frame(
Agriculture = 27.7,
Examination = 22,
Education = 29,
Catholic = 58.33,
Infant.Mortality = 19.3)
predict.lm(lm(y~as.matrix(swiss[,-1])),newdata = data.frame(c(27.7,22,29,58.33,19.3)))
predict.lm(lm(y~as.matrix(swiss[,-1])),newdata = data.frame(c(27.7,22,29,58.33,19.3)))
as.matrix(swiss[,-1])
View(x)
x = swiss[,-1]
x = as.matrix(swiss[,-1])
fit = lm(y~x)
prdict(fit)
predict(fit)
predict(fit,newdata = newData)
View(x)
fit = lm(y~t(x))
fit = lm(t(y)y~t(x))
fit = lm(t(y)~t(x))
fit = lm(y~x)
predict(fit,newdata = newData)
newData = data.frame(
Agriculture = c(27.7),
Examination = c(22),
Education = c(29),
Catholic = c(58.33),
Infant.Mortality = c(19.3))
predict(fit,newdata = newData)
newData
fit = lm(Fertility ~ *, data = swiss)
fit = lm(Fertility ~ ., data = swiss)
predict(fit,newdata = newData)
t(x)%*%beta
t(c(1,27.7,22,29,58.33,19.3))%*%beta
data(mtcars)
x1 = mtcars$wt[mtcars$vs=1]
data(mtcars)
x1 = mtcars$wt[mtcars$vs==1]
x2 = mtcars$wt[mtcars$vs==0]
data(mtcars)
x1 = mtcars$wt[mtcars$vs==1]
x2 = mtcars$wt[mtcars$vs==0]
y1 = mtcars$mpg[mtcars$vs==1]
y2 = mtcars$mpg[mtcars$vs==0]
data(mtcars)
x1 = mtcars$wt[mtcars$vs==1]
x1c = x1 - mean(x1)
x2 = mtcars$wt[mtcars$vs==0]
x2c = x2 - mean(x2)
y1 = mtcars$mpg[mtcars$vs==1]
y1c = y1 - mean(y1)
y2 = mtcars$mpg[mtcars$vs==0]
y2c = y2 - mean(y2)
beta1 = (y1c %*% x1c)/(x1c %*% x1c)
beta2 = (y2c %*% x2c)/(x2c %*% x2c)
data(mtcars)
x1 = mtcars$wt[mtcars$vs==1]
x1c = x1 - mean(x1)
x2 = mtcars$wt[mtcars$vs==0]
x2c = x2 - mean(x2)
y1 = mtcars$mpg[mtcars$vs==1]
y1c = y1 - mean(y1)
y2 = mtcars$mpg[mtcars$vs==0]
y2c = y2 - mean(y2)
beta1 = (y1c %*% x1c)/(x1c %*% x1c)
beta2 = (y2c %*% x2c)/(x2c %*% x2c)
mean(y1) - mean(y2) - (mean(x1)*beta1 + mean(x2)*beta2)
data(mtcars)
x1 = mtcars$wt[mtcars$vs==1]
x1c = x1 - mean(x1)
x2 = mtcars$wt[mtcars$vs==0]
x2c = x2 - mean(x2)
y1 = mtcars$mpg[mtcars$vs==1]
y1c = y1 - mean(y1)
y2 = mtcars$mpg[mtcars$vs==0]
y2c = y2 - mean(y2)
beta1 = (y1 %*% x1)/(x1 %*% x1)
beta2 = (y2 %*% x2)/(x2 %*% x2)
mean(y1) - mean(y2) - (mean(x1)*beta1 + mean(x2)*beta2)
data(mtcars)
x1 = mtcars$wt[mtcars$vs==1]
x1c = x1 - mean(x1)
x2 = mtcars$wt[mtcars$vs==0]
x2c = x2 - mean(x2)
y1 = mtcars$mpg[mtcars$vs==1]
y1c = y1 - mean(y1)
y2 = mtcars$mpg[mtcars$vs==0]
y2c = y2 - mean(y2)
beta1 = (y1c %*% x1c)/(x1c %*% x1c)
beta2 = (y2c %*% x2c)/(x2c %*% x2c)
mean(y1) - mean(y2) - (mean(x1)*beta1 + mean(x2)*beta2)
y1c %*% x1c
y1c * x1c
data(mtcars)
x1 = mtcars$wt[mtcars$vs==1]
x1c = x1 - mean(x1)
x2 = mtcars$wt[mtcars$vs==0]
x2c = x2 - mean(x2)
y1 = mtcars$mpg[mtcars$vs==1]
y1c = y1 - mean(y1)
y2 = mtcars$mpg[mtcars$vs==0]
y2c = y2 - mean(y2)
beta1 = (y1c %*% x1c)/(x1c %*% x1c)
beta2 = (y2c %*% x2c)/(x2c %*% x2c)
p = sum(x1c**2)/(sum(x1c**2)+sum(x2c**2))
mean(y1) - mean(y2) - (mean(x1)*beta1 + mean(x2)*beta2)
data(mtcars)
x1 = mtcars$wt[mtcars$vs==1]
x1c = x1 - mean(x1)
x2 = mtcars$wt[mtcars$vs==0]
x2c = x2 - mean(x2)
y1 = mtcars$mpg[mtcars$vs==1]
y1c = y1 - mean(y1)
y2 = mtcars$mpg[mtcars$vs==0]
y2c = y2 - mean(y2)
beta1 = (y1c %*% x1c)/(x1c %*% x1c)
beta2 = (y2c %*% x2c)/(x2c %*% x2c)
p = sum(x1c**2)/(sum(x1c**2)+sum(x2c**2))
beta = p*beta1 + (1-p)*beta2
mean(y1) - mean(y2) - (mean(x1)*beta - mean(x2)*beta)
data(mtcars)
x1 = mtcars$wt[mtcars$vs==1]
x1c = x1 - mean(x1)
x2 = mtcars$wt[mtcars$vs==0]
x2c = x2 - mean(x2)
y1 = mtcars$mpg[mtcars$vs==1]
y1c = y1 - mean(y1)
y2 = mtcars$mpg[mtcars$vs==0]
y2c = y2 - mean(y2)
beta1 = (y1c %*% x1c)/(x1c %*% x1c)
beta2 = (y2c %*% x2c)/(x2c %*% x2c)
p = sum(x1c**2)/(sum(x1c**2)+sum(x2c**2))
beta = p*beta1 + (1-p)*beta2
mean(y1) - mean(y2) - (mean(x1)*beta1 - mean(x2)*beta2)
data(mtcars)
x1 = mtcars$wt[mtcars$vs==1]
x1c = x1 - mean(x1)
x2 = mtcars$wt[mtcars$vs==0]
x2c = x2 - mean(x2)
y1 = mtcars$mpg[mtcars$vs==1]
y1c = y1 - mean(y1)
y2 = mtcars$mpg[mtcars$vs==0]
y2c = y2 - mean(y2)
beta1 = (y1c %*% x1c)/(x1c %*% x1c)
beta2 = (y2c %*% x2c)/(x2c %*% x2c)
p = sum(x1c**2)/(sum(x1c**2)+sum(x2c**2))
beta = p*beta1 + (1-p)*beta2
mean(y1) - mean(y2) - (mean(x1)*beta - mean(x2)*beta)
beta
data(swiss)
y = swiss$Fertility
x = as.matrix(swiss[,-1])
n = nrow(x)
decomp = princomp(x,cor=T)
plot(cumsum(decomp$sdev^2)/sum(decomp$dev^2), type="l")
data(swiss)
y = swiss$Fertility
x = as.matrix(swiss[,-1])
n = nrow(x)
decomp = princomp(x,cor=T)
plot(cumsum(decomp$sdev^2)/sum(decomp$sdev^2), type="l")
decomp2 = eigen(cor(x))
xnorm = apply(x,2,function(z) (z-mean(z))/sd(z))
decomp3 = svd(xnorm)
round(rbind(decomp2$vectors, decomp$loadings, decomp3$v),3)
round(rbind(decomp2$values, decomp$sdev^2, decomp3$d^2/(n-1)),3)
plot(decomp3$u[,1],decomp$scores[,1])
plot(decomp3$u[,1], xnorm %*% decomp2$vecotrs %*% diag(1/sqrt(decomp2$values))[,1])
data(swiss)
y = swiss$Fertility
x = as.matrix(swiss[,-1])
n = nrow(x)
decomp = princomp(x,cor=T)
plot(cumsum(decomp$sdev^2)/sum(decomp$sdev^2), type="l")
decomp2 = eigen(cor(x))
xnorm = apply(x,2,function(z) (z-mean(z))/sd(z))
decomp3 = svd(xnorm)
round(rbind(decomp2$vectors, decomp$loadings, decomp3$v),3)
round(rbind(decomp2$values, decomp$sdev^2, decomp3$d^2/(n-1)),3)
plot(decomp3$u[,1],decomp$scores[,1])
plot(decomp3$u[,1], xnorm %*% decomp2$vectors %*% diag(1/sqrt(decomp2$values))[,1])
u=decomp3$u[,1:4]
summary(lm(y~u))$r.squared
summary(lm(y~x))$r.squared
install.packages(deplyr)
install.packages('deplyr')
lybrary("dplyr")
library("dplyr")
install.packages('dplyr', repos = 'https://cloud.r-project.org')
library("dplyr")
data("mtcars")
select(mtcars,mpg, hp, drat, wt, qsec)
x = select(mtcars,mpg, hp, drat, wt, qsec)
decomp = princomp(x,cor=T)
decomp$sdev
decomp$sdev[1]/sum(decomp$sdev)
decomp$sdev[0]/sum(decomp$sdev)
decomp$sdev[1]/sum(decomp$sdev)
decomp$sdev[1]
decomp$sdev[1]^2/sum(decomp$sdev^2)
data(swiss)
fit = lm(Fertility ~ ., data = swiss)
round(summary(fit)$coef,3)
x = cbind(1,as.matrix(swiss[,-1]))
y = swiss$Fertility
beta = solve(t(x)%*%x ,t(x) %*% y)
e = y - x %*% beta
n = nrow(x)
p = ncol(x)
s = sqrt(sum(e^2)/(n-p))
c(s, summary(fit)$sigma)
betavar = solve(t(x) %*% x)*s^2
cbind(summary(fit)$coef[,2], sqrt(diag(betaVar)))
betaVar = solve(t(x) %*% x)*s^2
cbind(summary(fit)$coef[,2], sqrt(diag(betaVar)))
betaVar = solve(t(x) %*% x)*s^2
cbind(summary(fit)$coef[,2], sqrt(diag(betaVar)))
tstat = beta/sqrt(diag(betaVar))
cbind(summary(fit)$coef[,3], tstat)
cbind(summary(fit)$coef[,3], 2*pt(-abs(tstat),n-p))
cbind(summary(fit)$coef[,4], 2*pt(-abs(tstat),n-p))
k = cbind(0, diag(rep(1,p-1)))
kvar = k %*% solve(t(x) %*% x) %*% t(x)
fstat = t(k %*% beta) %*% solve(kvar) %*% (k %*% beta) / (p-1) / s^2
k = cbind(0, diag(rep(1,p-1)))
kvar = k %*% solve(t(x) %*% x) %*% t(k)
fstat = t(k %*% beta) %*% solve(kvar) %*% (k %*% beta) / (p-1) / s^2
cbind(summary(fit)$fstat, fstat)
k = cbind(0, diag(rep(1,p-1)))
kvar = k %*% solve(t(x) %*% x) %*% t(k)
fstat = t(k %*% beta) %*% solve(kvar) %*% (k %*% beta) / (p-1) / s^2
cbind(summary(fit)$fstat, fstat)
pf(fstat, p-1,n-p,lower.tail = F)
fit = lm (mpg ~ hp + wt, data = mtcars)
newcar = data.frame(hp = 90, wt = 2.2)
predict(fit, newData = newcar)
predict(fit, newData = newcar, interval = "confidence")
predict(fit, newData = newcar, interval = "prediction")
data("mtcars")
fit = lm (mpg ~ hp + wt, data = mtcars)
newcar = data.frame(hp = 90, wt = 2.2)
predict(fit, newData = newcar)
predict(fit, newData = newcar, interval = "confidence")
predict(fit, newData = newcar, interval = "prediction")
t(mtcars)
data("mtcars")
fit = lm (mpg ~ hp + wt, data = t(mtcars))
data("mtcars")
fit = lm (mpg ~ hp + wt, data = mtcars)
newcar = data.frame(hp = 90, wt = 2.2)
predict(fit, newData = newcar)
predict(fit, newData = newcar, interval = "confidence")
predict(fit, newData = newcar, interval = "prediction")
data("mtcars")
fit = lm (mpg ~ hp + wt, data = mtcars)
newcar = data.frame(hp = c(90), wt = c(2.2))
predict(fit, newData = newcar)
predict(fit, newData = newcar, interval = "confidence")
predict(fit, newData = newcar, interval = "prediction")
data("mtcars")
fit = lm (mpg ~ hp + wt, data = mtcars)
newcar = data.frame(hp = c(90), wt = c(2.2))
predict(fit, newdata = newcar)
predict(fit, newdata = newcar, interval = "confidence")
predict(fit, newdata = newcar, interval = "prediction")
library(dplyr)
library(dplyr)
install.packages(vctrs)
install.packages('vctrs')
install.packages("vctrs")
library(dplyr)
y = mtcars$mpg
x = as.matrix(cbind(1, select(mtcars,hp,wt)))
n = length(y)
p = ncol(x)
xtxinv = solve(t(x) %*% x)
beta = xtxinv %*% t(x) %*% y
x0 = c(1,90,2.2)
yhat = x %*% beta
e = y - yhat
s = sqrt(sum(e^2/(n-p)))
yhat0 = sum(x0*beta)
yhat + qt(c(0.025, 0.975), n-p)*s*sqrt(t(x0) %*% xtxinv %*% x0)
yhat0 + qt(c(0.025, 0.975), n-p)*s*sqrt(t(x0) %*% xtxinv %*% x0)
yhat0 + qt(c(0.025, 0.975), n-p)*s*sqrt(1+t(x0) %*% xtxinv %*% x0)
fit = lm(mpg ~ disp + hp, mtcars)
library(rgl)
fit = lm(mpg ~ disp + hp, mtcars)
library(rgl)
open3d()
fit = lm(mpg ~ disp + hp, mtcars)
library(rgl)
open3d()
plot3d(ellipse3d(fit), col="red", alpha = .5, aspect = T)
beta = coef(fit)
sigma = vcov(fit)
n = nrow(mtcars)
p = length(beta)
A = sigma * (3*qf(.95,3,n-p))
nms = names(beta)
open3d()
plot3d(ellipse3d(A,centre=beta,t=1), color = "blue", alpha=.5,aspect=T,xlabs=nms[1],ylabs=nms[2],zlab = nms[3])
data(mtcars)
y = mtcars$mpg
x = cbind(1, mtcars$hp, mtcars$wt)
n = nrow(x)
p = ncol(x)
hatmat = x %*% solve(t(x) %*% x) %*% t(x)
residmat = diag(rep(1,n)) - hatmat
e = residmat %*% y
s = sqrt(sum(e^2)/(n-p))
rstd = e / s / sqrt(diag(residmat))
cbind(rstd,rstandard(lm(y ~ x - 1)))
data(mtcars)
y = mtcars$mpg
x = cbind(1, mtcars$hp, mtcars$wt)
n = nrow(x)
p = ncol(x)
hatmat = x %*% solve(t(x) %*% x) %*% t(x)
residmat = diag(rep(1,n)) - hatmat
e = residmat %*% y
s = sqrt(sum(e^2)/(n-p))
rstd = e / s / sqrt(diag(residmat))
cbind(rstd,rstandard(lm(y ~ x - 1)))
plot(predict(lm(y~x-1)),rstd)
data(mtcars)
y = mtcars$mpg
x = cbind(1, mtcars$hp, mtcars$wt)
n = nrow(x)
p = ncol(x)
hatmat = x %*% solve(t(x) %*% x) %*% t(x)
residmat = diag(rep(1,n)) - hatmat
e = residmat %*% y
s = sqrt(sum(e^2)/(n-p))
rstd = e / s / sqrt(diag(residmat))
cbind(rstd,rstandard(lm(y ~ x - 1)))
plot(predict(lm(y~x-1)),rstd)
abline(h=0)
